{{- if .Values.kafka.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  ports:
    - port: {{ .Values.kafka.service.port }}
      name: kafka
      targetPort: {{ .Values.kafka.service.port }}
    - port: {{ .Values.kafka.service.internalPort }}
      name: kafka-internal
      targetPort: {{ .Values.kafka.service.internalPort }}
  clusterIP: None
  selector:
    app: kafka

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  serviceName: kafka
  replicas: {{ .Values.kafka.replicaCount }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        component: message-broker
    spec:
      tolerations: []
      nodeSelector:
        node-role.kubernetes.io/worker: "worker"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: fix-permissions
          image: busybox
          securityContext:
            runAsUser: 0
          command: ["sh", "-c", "chown -R 1000:1000 /var/lib/kafka/data"]
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
      containers:
        - name: kafka
          image: "{{ .Values.kafka.image.repository }}:{{ .Values.kafka.image.tag }}"
          imagePullPolicy: {{ .Values.kafka.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.kafka.service.port }}
              name: kafka
            - containerPort: {{ .Values.kafka.service.internalPort }}
              name: kafka-internal
          env:
            - name: KAFKA_BROKER_ID
              value: {{ .Values.kafka.env.brokerId | quote }}
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.zookeeper.service.port }}"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:{{ .Values.kafka.service.internalPort }},PLAINTEXT_HOST://0.0.0.0:{{ .Values.kafka.service.port }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-0.kafka.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.kafka.service.internalPort }},PLAINTEXT_HOST://localhost:{{ .Values.kafka.service.port }}"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.kafka.env.offsetsTopicReplicationFactor | quote }}
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: {{ .Values.kafka.env.autoCreateTopicsEnable | quote }}
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "kafka-broker-api-versions --bootstrap-server localhost:{{ .Values.kafka.service.port }}"
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "kafka-broker-api-versions --bootstrap-server localhost:{{ .Values.kafka.service.port }}"
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 10
          resources:
            {{- toYaml .Values.kafka.resources | nindent 12 }}
      {{- if not .Values.kafka.persistence.enabled }}
      volumes:
        - name: kafka-data
          emptyDir: {}
      {{- end }}
  {{- if .Values.kafka.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
        labels:
          {{- include "kafka.labels" . | nindent 10 }}
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.global.storageClass }}
        resources:
          requests:
            storage: {{ .Values.kafka.persistence.size }}
  {{- end }}
{{- end }}
